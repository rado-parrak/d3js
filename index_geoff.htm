<!doctype html>
<html>
<head>

</head>
<body>

<div id="container">
</div>

<script src="https://d3js.org/d3.v4.min.js"></script>
<script type="text/javascript" src="jquery-3.2.1.min.js"></script>
<script type="text/javascript">

    var inputwidth = 900;
    var inputheight = 600;
    var container = "#container";

    $.get("data.json", function (config) {

        var body = d3.select(container);
        var svg = body.append("svg");

        var data = config.data;

        var xy_chart = d3_xy_chart()
            .width(inputwidth)
            .height(inputheight)
            .xlabel(config.xaxisname)
            .ylabel(config.yaxisname);

        for (i = 0; i < data.length; i++) {
            for (j = 0; j < data[i].xc.length; j++) {
                data[i].xc[j] = new Date(data[i].xc[j]);
            }
            for (j = 0; j < data[i].xc.length; j++) {
                data[i].yc[j] = +data[i].yc[j];
            }
        }
        svg.datum(data).call(xy_chart);

        function d3_xy_chart() {

            function chart(selection) {

                var margin = {top: 20, right: 80, bottom: 30, left: 50},
                    innerwidth = width - margin.left - margin.right,
                    innerheight = height - margin.top - margin.bottom;

                selection.each(function (datasets) {

                    var x_scale = d3.scaleTime()//d3.scaleLinear()
                        .range([0, innerwidth])
                        .domain([
                            new Date(d3.min(datasets, function (d) {
                                return d3.min(d.xc);
                            })),
                            new Date(d3.max(datasets, function (d) {
                                return d3.max(d.xc);
                            }))
                        ]);

                    var y_scale = d3.scaleLinear()
                        .range([innerheight, 0])
                        .domain([d3.min(datasets, function (d) {
                            return d3.min(d.yc);
                        }),
                            d3.max(datasets, function (d) {
                                return d3.max(d.yc);
                            })]);

                    var color = d3.scaleOrdinal(d3.schemeCategory10)
                        .domain(d3.range(datasets.length));

                    var x_axis1 = d3.axisBottom()
                        .scale(x_scale)
                        .tickSize(-6);
                    var x_axis2 = d3.axisTop()
                        .scale(x_scale)
                        .tickSize(-6)
                        .tickFormat("");

                    var y_axis1 = d3.axisLeft()
                        .scale(y_scale)
                        .tickSize(-6);
                    var y_axis2 = d3.axisRight()
                        .scale(y_scale)
                        .tickSize(-6)
                        .tickFormat("");

                    var x_grid = d3.axisBottom()
                        .scale(x_scale)
                        .tickSize(-innerheight)
                        .tickFormat("");

                    var y_grid = d3.axisLeft()
                        .scale(y_scale)
                        .tickSize(-innerwidth)
                        .tickFormat("");

                    var draw_line = d3.line()
                        .curve(d3.curveMonotoneX)
                        .x(function (d) {
                            return x_scale(d[0]);
                        })
                        .y(function (d) {
                            return y_scale(d[1]);
                        });

                    var svg = d3.select(this)
                        .attr("width", width)
                        .attr("height", height)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    svg.append("g")
                        .attr("class", "x grid")
                        .attr("shape-rendering", "crispEdges")
                        .attr("fill", "none")
                        .attr("opacity", "0.2")
                        .attr("transform", "translate(0," + innerheight + ")")
                        .call(x_grid);

                    svg.append("g")
                        .attr("class", "y grid")
                        .attr("shape-rendering", "crispEdges")
                        .attr("fill", "none")
                        .attr("opacity", "0.2")
                        .call(y_grid);

                    svg.append("g")
                        .attr("class", "x axis")
                        .attr("shape-rendering", "crispEdges")
                        .attr("stroke-width", "2px")
                        .attr("transform", "translate(0," + innerheight + ")")
                        .call(x_axis1);

                    svg.append("text")
                        .attr("class", "x axis text")
                        .attr("x", 0.5 * innerwidth)
                        .attr("y", innerheight)
                        .attr("dy", "1.5em")
                        .style("text-anchor", "middle")
                        .text(xlabel);

                    svg.append("g")
                        .attr("class", "x axis 2")
                        .attr("shape-rendering", "crispEdges")
                        .attr("stroke-width", "2px")
                        .call(x_axis2);

                    svg.append("g")
                        .attr("class", "y axis")
                        .attr("shape-rendering", "crispEdges")
                        .attr("stroke-width", "2px")
                        .call(y_axis1);

                    svg.append("text")
                        .attr("class", "y axis text")
                        .attr("x", -0.5 * innerheight)
                        .attr("dy", "-2em")
                        .attr("transform", "rotate(-90)")
                        .style("text-anchor", "middle")
                        .text(ylabel);

                    svg.append("g")
                        .attr("class", "y axis 2")
                        .attr("shape-rendering", "crispEdges")
                        .attr("stroke-width", "2px")
                        .attr("transform", "translate(" + innerwidth + ",0)")
                        .call(y_axis2)

                    var data_lines = svg.selectAll(".d3_xy_chart_line")
                        .data(datasets.map(function (d) {
                            return d3.zip(d.xc, d.yc);
                        }))
                        .enter().append("g")
                        .attr("class", "d3_xy_chart_line");

                    data_lines.append("path")
                        .attr("class", "line")
                        .attr("d", function (d) {
                            return draw_line(d);
                        })
                        .attr("stroke-width", "2px")
                        .attr("fill", "none")
                        .attr("stroke", function (_, i) {
                            return color(i);
                        });

                    data_lines.append("text")
                        .datum(function (d, i) {
                            return {name: datasets[i].label, final: d[d.length - 1]};
                        })
                        .attr("transform", function (d) {
                            return ( "translate(" + x_scale(d.final[0]) + "," +
                            y_scale(d.final[1]) + ")" );
                        })
                        .attr("x", 3)
                        .attr("dy", ".35em")
                        .attr("fill", function (_, i) {
                            return color(i);
                        })
                        .text(function (d) {
                            return d.name;
                        });


                });
            }

            chart.width = function (value) {
                if (!arguments.length) return width;
                width = value;
                return chart;
            };

            chart.height = function (value) {
                if (!arguments.length) return height;
                height = value;
                return chart;
            };

            chart.xlabel = function (value) {
                if (!arguments.length) return xlabel;
                xlabel = value;
                return chart;
            };

            chart.ylabel = function (value) {
                if (!arguments.length) return ylabel;
                ylabel = value;
                return chart;
            };

            return chart;
        }
    }, "JSON");
</script>
</body>
</html>